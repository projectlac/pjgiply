import { createSlice } from '@reduxjs/toolkit';


const initialState = {
  saveImage: [],
  firstLoad: false
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.


export const searchSlice = createSlice({
  name: 'search',
  initialState,

  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    like(state, action) {

      if (!state.firstLoad) {
        !state.saveImage.includes(action.payload) && state.saveImage.push(action.payload)
        localStorage.setItem("id_list", state.saveImage)

      }
      else {
        const data = localStorage.getItem("id_list")
        state.firstLoad = false
        if (data) {
          if (!data.includes(action.payload)) {
            let ar = `${data},${action.payload}`;
            state.saveImage = ar.split(',');

            localStorage.setItem("id_list", ar)
          }
        }
      }

    },
    getDataFromLocal(state) {
      const data = localStorage.getItem("id_list")
      if (Boolean(data)) {
        var ar = data.split(',');
        state.saveImage = ar
        state.firstLoad = true
      }

    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.

});

export const { like, getDataFromLocal } = searchSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.search.value)`
export const listLike = (state) => state.search.saveImage;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default searchSlice.reducer;
